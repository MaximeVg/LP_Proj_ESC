@page "/"
@using Data
@inject CompteService compteService
@using Pages
@using System.Text
<NavMenu/>
<h1 class="leftPos" id="tvCreer">Créez un compte</h1>
<br/><br/>

     <div class="parent">
         <div class="div1">
             <div class="form-group">
                 <label class="labelForm" for="exampleInputEmail1">Adresse mail*</label>
                 <input style=" background: url('resources/mail.png');
                                background-repeat: no-repeat;
                                background-position: left;
                                background-position-x:5%;
                                background-size: 18px;
                                padding-left:15%;"
                        @bind="mail" type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Entrer votre email">
             </div>
             <div class="form-group">
                 <label class="labelForm" for="exampleInputPassword1">Mot de passe*</label>
                 <input style=" background: url('resources/pass.png');
                                background-repeat: no-repeat;
                                background-position: left;
                                background-position-x:5%;
                                background-size: 18px;
                                padding-left:15%;"
                        @bind="pass" type="password" class="form-control" id="exampleInputPassword1" placeholder="Mot de passe">

             </div>
             <div class="form-group">
                 <label class="labelForm" for="confirmerMdp">Confirmer votre mot de passe*</label>
                 <input style=" background: url('resources/pass.png');
                                background-repeat: no-repeat;
                                background-position: left;
                                background-position-x:5%;
                                background-size: 18px;
                                padding-left:15%;"
                        @bind="passConfirm " type="password" class="form-control" id="confirmerMdp" placeholder="Entrer de nouveau votre mot de passe">
             </div>
             <div class="form-group">
                 <label class="labelForm" for="nom">Nom*</label>
                 <input @bind="nom" type="text" class="form-control" id="nom" placeholder="Entrer votre nom">
             </div>

             <div class="form-group">
                 <label class="labelForm" for="prenom">Prenom*</label>
                 <input @bind="prenom" type="text" class="form-control" id="prenom" placeholder="Entrer votre prenom">
             </div>




         </div>
         <div class="div2">
             <div class="form-group">
                 <label class="labelForm" for="poste">Quel poste occupez-vous ?</label>
                 <input @bind="poste" type="text" class="form-control" id="poste" placeholder="Entrer votre poste">
             </div>

             <div class="form-group">
                 <label class="labelForm" for="dateNaiss">Date de naissance*</label>
                 <input style=" background: url('resources/calendar.png');
                                background-repeat: no-repeat;
                                background-position: left;
                                background-position-x:5%;
                                background-size: 18px;
                                padding-left:15%;"
                        @bind="dateNaiss" type="date" class="form-control" id="dateNaiss" placeholder="Entrer votre poste">
             </div>

             <div class="form-group">
                 <label class="labelForm" for="exampleFormControlTextarea1">Décrivez-vous en quelques mots*</label>
                 <textarea @bind="desc" class="form-control" id="exampleFormControlTextarea1" rows="3"></textarea>
             </div>

             <button class="btn btn-primary" @onclick="@traiterDemande">Créer mon compte</button>
             @foreach (var warn in warns)
             {
                 <p class="alert alert-danger" role="alert">
                     @warn
                 </p>
             }
         </div>

         @if (sortie.Length > 0)
         {
             <p class="alert alert-success" role="alert">
                 @sortie
             </p>
         }


         <div>
             Comptes existants :
             @foreach (Compte c in comptes)
             {
                 <br />
                 @c.mail
             }
         </div>
     </div>




@code{

    private string mail="";
    private string pass="";
    private string passConfirm="";
    private string nom="";
    private string prenom="";
    private string poste="";
    private DateTime dateNaiss = new DateTime();
    private string desc = "";
    private string sortie = "";
    private IList<String> warns = new List<String>();

    List<Compte> comptes = new List<Compte>();

    protected override async Task OnInitializedAsync()
    {
        comptes = await Task.Run(() => compteService.GetComptes());
    }


    public void traiterDemande()
    {
        warns.Clear();
        verifNull();
        verifMail();
        verifPass();

        if (warns.Count == 0)
        {
            Compte newUser = new Compte();
            newUser.setPass(sha256(pass));
            newUser.mail = mail;
            newUser.nom = nom;
            newUser.prenom = prenom;
            newUser.desc = desc;
            newUser.dateNaiss = dateNaiss;
            newUser.poste = poste;

            if(!(compteService.Create(newUser).Equals("OK")))
            {
                warns.Add("Le compte " + mail + " existe déjà !");

            }
            else
            {
                sortie=newUser.toString();
                comptes = compteService.GetComptes();
            }
        }

    }

    public void verifNull()
    {
        if (desc.Trim().Equals("") ||
            mail.Trim().Equals("") ||
            pass.Trim().Equals("") ||
            passConfirm.Trim().Equals("") ||
            nom.Trim().Equals("") ||
            prenom.Trim().Equals("") ||
            dateNaiss.ToString().Trim().Equals(""))
        {
            warns.Add("Tous les champs sont obligatoires");
        }
    }

    public void verifMail()
    {
        Regex regex = new Regex(@"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$");
        Match match = regex.Match(mail);
        if (!match.Success || match==null)
        {
            warns.Add("Le mail " + mail + " est incorrect");
        }
    }

    public void verifPass()
    {
        if (!pass.Equals(passConfirm))
        {
            warns.Add("Les mots de passe ne correspondent pas");
        }
        if (pass.Trim().Length<5 || pass==null)
        {
            warns.Add("Mot de passe trop court de " + (5-pass.Trim().Length));
        }
    }

    public string sha256(string texte)
    {
        var crypt = new System.Security.Cryptography.SHA256Managed();
        var hash = new System.Text.StringBuilder();
        byte[] crypto = crypt.ComputeHash(Encoding.UTF8.GetBytes(texte));
        foreach (byte theByte in crypto)
        {
            hash.Append(theByte.ToString("x2"));
        }
        return hash.ToString();
    }
}
